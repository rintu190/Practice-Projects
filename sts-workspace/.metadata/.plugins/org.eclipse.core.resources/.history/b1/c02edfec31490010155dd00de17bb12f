package geeksForGeeks;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;

public class ArrayFindTripletZeroSum {

	public static void main(String[] args) {
		int[] arr = {0,-1,2,-3,1};
//		ArrayList<ArrayList<Integer>> result = findTripletsNaive(arr);
		ArrayList<ArrayList<Integer>> result = findTripletsHashMap(arr);
		for(List<Integer> triplet : result) {
			System.out.println(triplet.get(0) +" "+ triplet.get(1) +" "+ triplet.get(2));
		}
	}

	private static ArrayList<ArrayList<Integer>> findTripletsHashMap(int[] arr) {
		HashMap<Integer,List<Integer>> map = new HashMap<>();
		List<List<Integer>> result = new ArrayList<>();
		
		for(int j = 0; j < arr.length;j++) {
			for(int k = j + 1; k < arr.length;k++) {
				int value = -1 * (arr[j] + arr[k]);
				
				if(map.containsKey(value)) {
					for(int i : map.get(value))
						result.add(Arrays.asList(i,j,k));
				}
			}
			map.putIfAbsent(arr[j], new ArrayList<>());
			map.get(arr[j]).add(j);
		}
		
		return null;
	}

	private static ArrayList<ArrayList<Integer>> findTripletsNaive(int[] arr) {
		ArrayList<ArrayList<Integer>> result = new ArrayList<>();
		int n = arr.length;
		
		for(int i = 0;i < n - 2;i++) {
			for(int j = i + 1; j < n - 1;j++) {
				for(int k = j + 1; k < n;k++) {
					if(arr[i] + arr[j] + arr[k] == 0) {
						ArrayList<Integer> triplet = new ArrayList<>();
						triplet.add(i);
						triplet.add(j);
						triplet.add(k);
						result.add(triplet);
					}
				}
			}
		}
		return result;
	}

}
