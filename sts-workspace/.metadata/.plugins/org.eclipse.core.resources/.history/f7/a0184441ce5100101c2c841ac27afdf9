package geeksForGeeks;

public class ArrayRainWaterTrapping {

	public static void main(String[] args) {
		int[] arr = {2,1,5,3,1,0,4};
//		int result = maxWaterleftRightMax(arr);
//		int result = maxWaterPrefixSuffixMax(arr);
		int result = maxWaterTwoPointers(arr);
		System.out.println(result);
		
	}

	private static int maxWaterTwoPointers(int[] arr) {
		int left = 1;
		int right = arr.length - 2;
		int lMax = arr[left - 1];
		int rMax = arr[right + 1];
		int result = 0;
		
		while(left <= right) {
			if(rMax <= lMax) {
				result += Math.max(0,rMax - arr[right]);
				rMax = Math.max(rMax, arr[right]);
				right -= 1;
			} else {
				result += Math.max(0, lMax - arr[left]);
				lMax = Math.max(lMax, arr[left]);
				left += 1;
			}
		}
		return result;
	}

	private static int maxWaterPrefixSuffixMax(int[] arr) {
		int n = arr.length;
		int[] left = new int[n];
		int[] right = new int[n];
		int result = 0;
		
		left[0] = arr[0];
		for(int i = 1;i < n;i++)
			left[i] = Math.max(left[i - 1], arr[i]);
		
		right[n - 1] = arr[n - 1];
		for(int i = n -2; i >=0;i--)
			right[i] = Math.max(right[i + 1], arr[i]);
		
		for(int i = 1;i < n -1;i++) {
			int minOfTwo = Math.min(left[i], right[i]);
			result += minOfTwo - arr[i];
			
		}
		return result;
	}

	private static int maxWaterleftRightMax(int[] arr) {
		int result = 0;
		for(int i = 1;i < arr.length - 1;i++) {
			int left = arr[i];
			for(int j = 0;j < i;j++)
				left = Math.max(left, arr[j]);
			
			int right = arr[i];
			for(int j = i+1;j < arr.length;j++)
				right = Math.max(right, arr[j]);
			result += Math.min(left, right) - arr[i];
		}
		return result;
	}

}
