package coreJava;

import java.util.concurrent.BrokenBarrierException;
import java.util.concurrent.CyclicBarrier;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.TimeoutException;

public class ConcurrencyCyclicBarrier {

	public static void main(String[] args) {
		CyclicBarrier cb = new CyclicBarrier(3,()->{
			System.out.println("Barrier reached");
		});
		System.out.println("Starting");
		new MyThread(cb,"Thread 1");
		new MyThread(cb,"Thread 2");
//		new MyThread(cb,"Thread 3");
		
	}

}
class MyThread{
	CyclicBarrier cbar;
	String name;
	
	MyThread(CyclicBarrier c,String n){
		cbar = c;
		name = n;
		new Thread(r).start();
	}
	Runnable r = ()-> {
		System.out.println(name);
		try {
			cbar.await(10, TimeUnit.SECONDS);
		} catch (InterruptedException | BrokenBarrierException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (TimeoutException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	};
}
